

# This file was *autogenerated* from the file challenge40/solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_512 = Integer(512); _sage_const_1024 = Integer(1024); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1)
from Crypto.Util.number import getPrime
import random

m = random.getrandbits(_sage_const_512 )
print(m)

def encrypt_once(m):
    while True:
        p = getPrime(_sage_const_1024 )
        q = getPrime(_sage_const_1024 )
        if p != q and p % _sage_const_3  != _sage_const_1  and q % _sage_const_3  != _sage_const_1 :
            break

    n = p * q
    e = _sage_const_3 
    et = (p-_sage_const_1 ) * (q-_sage_const_1 )
    d = pow(e, -_sage_const_1 , et)

    ct = pow(m, e, n)
    return ct, n

ct1, n1 = encrypt_once(m)
ct2, n2 = encrypt_once(m)
ct3, n3 = encrypt_once(m)

x = crt([ct1, ct2, ct3], [n1, n2, n3])
x = x % lcm([n1, n2, n3])

print(x**(_sage_const_1 /_sage_const_3 ))

